worker_processes 4;
daemon off;

error_log /dev/stderr;

events {
  worker_connections 1024;
}

http {
  charset utf-8;

  log_format access_json '{"logType": "nginx-access", '
                         ' "remoteHost": "$remote_addr", '
                         ' "user": "$remote_user", '
                         ' "time": "$time_local", '
                         ' "request": "$request", '
                         ' "status": $status, '
                         ' "size": $body_bytes_sent, '
                         ' "referer": "$http_referer", '
                         ' "userAgent": "$http_user_agent", '
                         ' "requestTime": $request_time, '
                         ' "httpHost": "$http_host"}';

  access_log /dev/stdout access_json;
  default_type application/octet-stream;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off;
  server_tokens off;

  expires -1;

  real_ip_header X-Forwarded-For;

  # application version a
  upstream version_a {
      server {{ env "A_BACKEND" }};
  }
  # application version b
  upstream version_b {
      server {{ env "B_BACKEND" }};
  }


  # set weighting: 
  split_clients "app${remote_addr}${http_user_agent}${date_gmt}" $appversion {
      {{ env "WEIGHTING" }}
  }    
  map $cookie_split_test_version $upstream_group {
      default $appversion;
      "version_a" "version_a";
      "version_b" "version_b";
  }


  server {
    listen {{ port }};
    server_name localhost;

    satisfy any;

    error_page 403 = @forbidden;

    location @forbidden {
      allow all;
      access_log off;

      default_type text/plain;
      return 403 'Forbidden by {{ env "APP_NAME" }}';
    }

    location @check {
      default_type text/plain;
      return 200 'OK';
    }

    location = /_route-service-health {
      allow all;
      access_log off;

      stub_status on;
      access_log off;
    }

    location / {

      # Internal routing is IPv4 only.
      resolver {{nameservers}} ipv6=off;

      proxy_http_version 1.1;
      proxy_ssl_server_name on;
      proxy_ssl_protocols TLSv1.2;
      proxy_set_header Connection "";
  
      add_header Set-Cookie "split_test_version=$upstream_group;Path=/;Max-Age=518400;";
      proxy_set_header Host $host;            
      if ($upstream_group = "version_a") {
          proxy_pass http://{{ env "A_BACKEND" }}:8080;
          break;
      }          
      if ($upstream_group = "version_b") {
          proxy_pass http://{{ env "B_BACKEND" }}:8080;
          break;
      }
      proxy_pass http://$appversion:8080;
    }
  }
}
